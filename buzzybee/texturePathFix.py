import osimport maya.cmds as cmdsimport maya.mel as melimport maya.OpenMaya as OpenMayadef actualScript():	dirPath = cmds.textField('fileBrowserTF', query=True, text=True)	if dirPath:		if os.path.isdir(dirPath):			modelPanel = cmds.getPanel(type='modelPanel')	#get all modeling panel			for each in modelPanel:				cmds.modelEditor(each, edit=True, displayTextures=0)	#set all model panel display textures to OFF to prevent lagging			subDirPath = []			for root, subFolders, files in os.walk(dirPath):				subDirPath.append(root)					imgExt = []			fileNodes = cmds.ls(type=['file', 'mentalrayIblShape'])	#list all file nodes			for file in fileNodes:	#for each file node,				if cmds.objectType(file) == 'file':					fileName = file + '.fileTextureName'				elif cmds.objectType(file) == 'mentalrayIblShape':					fileName = file + '.texture'				texturePath = cmds.getAttr(fileName)	#get the image path								try:					if '.' in texturePath[len(texturePath) - 4:]:	#if '.' in last 4 strings(asdasd"."jpg), a cheap way to get all image extensions for the current scene file						if texturePath[len(texturePath) - 4:] not in imgExt:	#ensure no duplicates in variable list							imgExt.append(texturePath[len(texturePath) - 4:])				except:					pass								textures = []			for dir in subDirPath:				for files in os.listdir(dir):					if files[len(files) - 4:] in imgExt:						textures.append(os.path.join(dir, files))								fileNodes = cmds.ls(type=['file', 'mentalrayIblShape'])			for file in fileNodes:				if cmds.objectType(file) == 'file':					fileName = file + '.fileTextureName'				elif cmds.objectType(file) == 'mentalrayIblShape':					fileName = file + '.texture'				texturePath = cmds.getAttr(fileName)						try:					if not os.path.isfile(texturePath):	#check for file image path's existence, only pick on broken file path and skip the non-broken ones						textureName = os.path.basename(texturePath)	#get the file image path's basename(texture.xxx)						for path in textures:							if textureName == os.path.basename(path):								cmds.setAttr(fileName, path, type='string')				except:					pass		else:			OpenMaya.MGlobal.displayError('Directory do not exist!')	else:		OpenMaya.MGlobal.displayWarning('Please browse for sourceimages directory!')if cmds.window('myWindow', exists=True):	#if window exist, then	cmds.deleteUI('myWindow')	#delete the window(upon delete window, maya will automatically save pref)	cmds.windowPref('myWindow', remove=True)	#remove any window pref to ensure open with default height and widthcmds.window('myWindow', title='gy_texturePathFix v1.0', sizeable=True, maximizeButton=True, minimizeButton=True, resizeToFitChildren=True)cmds.columnLayout('parentColumnLayout', columnAlign='center', columnWidth=322, columnAttach=['both', 10])cmds.setParent('parentColumnLayout') cmds.columnLayout(height=8)cmds.setParent('parentColumnLayout')cmds.columnLayout()cmds.text(label=' Source Directory ', align='left', width=300)cmds.setParent('parentColumnLayout')cmds.columnLayout()cmds.textField('fileBrowserTF', text='P:\\TVSeries\\BuzzyBee\\MAYA_PROJECT\\sourceimages', width=300)def getDirPath(dirpath, type):	cmds.textField('fileBrowserTF', edit=True, text=dirpath)	return Truedef dirBrowseDialog():	cmds.fileBrowserDialog(fileCommand=getDirPath, mode=4, actionName='Directory')cmds.setParent('parentColumnLayout')cmds.columnLayout()cmds.button('fileBrowserBTN', backgroundColor=[0.7, 0.7, 0.7], label='browse...', width=300, align='center', command='dirBrowseDialog()')cmds.setParent('parentColumnLayout')cmds.columnLayout()cmds.button(label='Fix all broken path!', backgroundColor=[0.7, 0.7, 0.7], width=300, align='center', command='actualScript()\ncheckBrokenPath()\nchangeColorTF()\ntextureNameInfo()')cmds.setParent('parentColumnLayout')cmds.columnLayout()cmds.separator(height=20, style='in', width=300, horizontal=True)cmds.setParent('parentColumnLayout')cmds.columnLayout()cmds.text('missingTF', label=' No broken path!', align='left', backgroundColor=[0,1,0], width=300)cmds.setParent('parentColumnLayout')cmds.columnLayout(height=200)cmds.textScrollList('missingTSL', numberOfRows=10, allowMultiSelection=False, width=300, height=200, selectCommand='loadMissingNode()\ntextureNameInfo()', deleteKeyCommand='deleteMissingNode()\ncheckBrokenPath()\nchangeColorTF()\ntextureNameInfo()', doubleClickCommand='textureQuickBrowser()\ncheckBrokenPath()\nchangeColorTF()\ntextureNameInfo()')def changeColorTF():	if not cmds.textScrollList('missingTSL', query=True, allItems=True):		cmds.text('missingTF', edit=True, label=' No broken path!', align='left', backgroundColor=[0, 1, 0], width=300)	else:		cmds.text('missingTF', edit=True, label=' %i broken path(s) found!'%(len(cmds.textScrollList('missingTSL', query=True, allItems=True))), align='left', backgroundColor=[1, 0, 0], width=300)		def checkBrokenPath():	selectionTSL = cmds.textScrollList('missingTSL', query=True, selectItem=True)	cmds.textScrollList('missingTSL', edit=True, removeAll=True)			fileNodes = cmds.ls(type=['file', 'mentalrayIblShape'])	for file in fileNodes:		if cmds.objectType(file) == 'file':			fileName = file + '.fileTextureName'		elif cmds.objectType(file) == 'mentalrayIblShape':			fileName = file + '.texture'		texturePath = cmds.getAttr(fileName)			try:			if not os.path.isfile(texturePath):				cmds.textScrollList('missingTSL', edit=True, append=file)		except:			cmds.textScrollList('missingTSL', edit=True, append=file)							if selectionTSL and cmds.textScrollList('missingTSL', query=True, allItems=True):		if selectionTSL[0] in cmds.textScrollList('missingTSL', query=True, allItems=True):	#ensure *selectionTSL* has existing value that current TSL also do to prevent gay shit error.			cmds.textScrollList('missingTSL', edit=True, selectItem=selectionTSL[0])						def loadMissingNode():	selectionTSL = cmds.textScrollList('missingTSL', query=True, selectItem=True)	if selectionTSL:		cmds.select(selectionTSL[0], replace=True)		mel.eval('showEditor %s;' %selectionTSL[0])		def textureQuickBrowser():	selectionTSL = cmds.textScrollList('missingTSL', query=True, selectItem=True)	if selectionTSL:		if cmds.objectType(selectionTSL[0]) == 'file':			fileName = selectionTSL[0] + '.fileTextureName'		elif cmds.objectType(selectionTSL[0]) == 'mentalrayIblShape':			fileName = selectionTSL[0] + '.texture'		textureBrowser = cmds.fileDialog(mode=0)	if textureBrowser:	#if something selected from the texture browser		cmds.setAttr(fileName, textureBrowser, type='string')	else:	#else don't do nothing		pass		def deleteMissingNode():	selectionTSL = cmds.textScrollList('missingTSL', query=True, selectItem=True)	if selectionTSL:		cmds.delete(selectionTSL[0])		def textureNameInfo():	selectionTSL = cmds.textScrollList('missingTSL', query=True, selectItem=True)	#get textScrollList selection	if selectionTSL:		if cmds.objectType(selectionTSL[0]) == 'file':			fileName = selectionTSL[0] + '.fileTextureName'		elif cmds.objectType(selectionTSL[0]) == 'mentalrayIblShape':			fileName = selectionTSL[0] + '.texture'		try:			texNameInfo = os.path.basename(cmds.getAttr(fileName))	#get file image path			if texNameInfo:	#if file image path contain at least a string				cmds.text('texureNameT', edit=True, label=texNameInfo)	#set texture name info to image path's basename			else:	#if file image path is empty				cmds.text('texureNameT', edit=True, label='*')	#set texture name info to '*'		except:			cmds.text('texureNameT', edit=True, label='*')	else:		cmds.text('texureNameT', edit=True, label='*')	#set texture name info to '*'		cmds.setParent('parentColumnLayout')cmds.columnLayout()cmds.button(label='Refresh', width=300, align='center', backgroundColor=[0.7, 0.7, 0.7], command='checkBrokenPath()\nchangeColorTF()\ntextureNameInfo()\nloadMissingNode()')cmds.setParent('parentColumnLayout')cmds.columnLayout()cmds.text('texureNameT', label='*')cmds.setParent('parentColumnLayout')cmds.columnLayout(height=8)checkBrokenPath()if cmds.textScrollList('missingTSL', query=True, numberOfItems=True) > 0:	changeColorTF()cmds.showWindow('myWindow')