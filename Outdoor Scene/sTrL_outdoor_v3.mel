global proc renderGlobalSettings(){	//Render Settings	setAttr "defaultRenderGlobals.imageFilePrefix" -type "string" "%s";	setAttr "defaultRenderGlobals.imageFormat" 5;	setAttr "defaultRenderGlobals.outFormatControl" 0;	setAttr "defaultRenderGlobals.animation" 1;	setAttr "defaultRenderGlobals.putFrameBeforeExt" 1;	setAttr "defaultRenderGlobals.periodInExt" 2;	setAttr "defaultRenderGlobals.extensionPadding" 3;		setAttr "defaultRenderGlobals.startFrame" `playbackOptions -query -min`;	setAttr "defaultRenderGlobals.endFrame" `playbackOptions -query -max`;	setAttr "defaultRenderGlobals.byFrameStep" 1;	setAttr "defaultRenderGlobals.modifyExtension" 0;		setAttr "defaultResolution.aspectLock" 0;	setAttr "defaultResolution.width" 1920;	setAttr "defaultResolution.height" 1080;	setAttr "defaultResolution.imageSizeUnits" 0;	setAttr "defaultResolution.dotsPerInch" 72;	setAttr "defaultResolution.pixelDensityUnits" 0;	setAttr "defaultResolution.deviceAspectRatio" 1.777778;	setAttr "defaultResolution.pixelAspect" 1;		setAttr "defaultRenderGlobals.enableDefaultLight" 0;}global proc mrSetup(){	if (`pluginInfo -query -loaded -name "Mayatomr"` == "0")	{		loadPlugin "Mayatomr";	}	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";		if (!`objExists("mentalrayGlobals")`)	{		createNode "mentalrayGlobals" -name "mentalrayGlobals";	}	if (!`objExists("miDefaultFramebuffer")`)	{		createNode "mentalrayFramebuffer" -name "miDefaultFramebuffer";	}	if (!`objExists("miDefaultOptions")`)	{		createNode "mentalrayOptions" -name "miDefaultOptions";	}	if (!`isConnected "miDefaultFramebuffer.message" "mentalrayGlobals.framebuffer"`)	{		connectAttr -force "miDefaultFramebuffer.message" "mentalrayGlobals.framebuffer";	}	if (!`isConnected "miDefaultOptions.message" "mentalrayGlobals.options"`)	{		connectAttr -force "miDefaultOptions.message" "mentalrayGlobals.options";	}		//FG Settings	setAttr "miDefaultOptions.finalGather" 1;	setAttr "miDefaultOptions.finalGatherRays" 60;	setAttr "miDefaultOptions.finalGatherPresampleDensity" 0.6;	setAttr "miDefaultOptions.finalGatherPoints" 10;	setAttr "miDefaultOptions.finalGatherScale" -type double3 1.3 0.80665 0.65 ;	setAttr "miDefaultOptions.finalGatherBounceScale" -type double3 1.5 1.5 1.5 ;	setAttr "miDefaultOptions.finalGatherTraceDiffuse" 1;	setAttr "mentalrayGlobals.accelerationMethod" 4;	setAttr "miDefaultOptions.finalGatherTraceDepth" 1;	setAttr miDefaultOptions.finalGatherMode 3;}global proc mrMiaExposurePhoto(){	//miaExposurePhoto Settings	///////////////////////////////////	float $cm2Factor		= 10000;	float $whitePoint[]		= {0, 0, 0};	float $filmIso 		= 100;	float $cameraShutter		= 100;	float $fNumber 		= 16;	float $vignetting 		= 1;	float $burnHighlights	= 0.45;	float $crushBlacks		= 1;	float $saturation 		= 1.1;	float $gamma 			= 2.100;	///////////////////////////////////		string $miaExposurePhoto = "";	if (!`objExists "buzzyBeeMiaExposurePhoto"`)	{		$miaExposurePhoto = `createNode "mia_exposure_photographic" -name "buzzyBeeMiaExposurePhoto"`;	}	else	{		$miaExposurePhoto = "buzzyBeeMiaExposurePhoto";	}	setAttr ($miaExposurePhoto + ".cm2_factor") 			    $cm2Factor;	setAttr ($miaExposurePhoto + ".whitepoint") -type double3 	$whitePoint[0] $whitePoint[1] $whitePoint[2];	setAttr ($miaExposurePhoto + ".film_iso")		 		    $filmIso;	setAttr ($miaExposurePhoto + ".camera_shutter") 		    $cameraShutter;	setAttr ($miaExposurePhoto + ".f_number") 			        $fNumber;	setAttr ($miaExposurePhoto + ".vignetting") 			    $vignetting;	setAttr ($miaExposurePhoto + ".burn_highlights")		    $burnHighlights;	setAttr ($miaExposurePhoto + ".crush_blacks")			    $crushBlacks;	setAttr ($miaExposurePhoto + ".saturation")			        $saturation;	setAttr ($miaExposurePhoto + ".gamma")				        $gamma;		for ($each in `ls -type "camera"`)	{		if (!`isConnected "buzzyBeeMiaExposurePhoto.message" ($each + ".miLensShader")`)		{			connectAttr -force "buzzyBeeMiaExposurePhoto.message" ($each + ".miLensShader");		}	}}global proc cameraRefresh(){	string $allCamera[] = `listCameras`;	string $selection[] = {};	$selection = `textScrollList -query -selectItem "cameraTSL"`;	textScrollList -edit -removeAll "cameraTSL";	for ($eachObject in $allCamera)	{		textScrollList -edit -append $eachObject "cameraTSL";	}		if ($selection[0] != "" && `objExists($selection[0])`)	{		textScrollList -edit -selectItem $selection[0] "cameraTSL";	}}global proc setRenderableCamera(){	string $allCamera[] = `listCameras`;	string $cameraSelection[] = `textScrollList -query -selectItem "cameraTSL"`;		if (`objExists($cameraSelection[0])`)	{    		cameraRefresh();    			for ($eachObject in $allCamera)		{			setAttr ($eachObject + ".renderable") 0;		}					setAttr ($cameraSelection[0] + ".renderable") 1;		setAttr ($cameraSelection[0] + ".nearClipPlane") 1;		setAttr ($cameraSelection[0] + ".farClipPlane") 100000;	    	setAttr -lock 0 ($cameraSelection[0] + ".scaleX");	   	setAttr -lock 0 ($cameraSelection[0] + ".scaleY");	    	setAttr -lock 0 ($cameraSelection[0] + ".scaleZ");	    	cutKey -clear ($cameraSelection[0] + ".scaleX");	    	cutKey -clear ($cameraSelection[0] + ".scaleY");	    	cutKey -clear ($cameraSelection[0] + ".scaleZ");	    	    	setAttr ($cameraSelection[0] + ".scaleX") 1;	    	setAttr ($cameraSelection[0] + ".scaleY") 1;	    	setAttr ($cameraSelection[0] + ".scaleZ") 1;	    		select -replace $cameraSelection[0];	}    	else    	{    		cameraRefresh();   	}}global proc mrSubdivApprox(int $mrSubdivApproxManual){	//mrSubdivApprox Settings	///////////////////////////////	int $approxMethod	= 2;			int $minSubdiv	= 0;	int $maxSubdiv	= 1;			float $length		= .999;		int $viewDependent	= 1;			int $fine		= 1;	///////////////////////////////	if (`pluginInfo -query -loaded -name "Mayatomr"` == "0")	{		loadPlugin "Mayatomr";	}	string $mrSubdivApproxMode 	= `radioCollection -query -select "approximationRC"`;	string $smoothException		= `textField -query -text "smoothingException"`;		if ($mrSubdivApproxMode != "approxOffRB")	{		string $dontSmoothSelection[] = {};		int $intOrder2 = 0;		string $selection[] = {};		int $intOrder = 0;		if ($mrSubdivApproxMode == "approxAllRB")		{			$selection = `ls -type "mesh"`;						if ($smoothException != "")			{				for ($each in $selection)				{					if (! `gmatch $each ("*" + $smoothException + "*")`)	//mask out all the mesh that does not contain "typed string" in UI					{						$selection[$intOrder] = $each;						$intOrder += 1;					}					else					{						$dontSmoothSelection[$intOrder2] = $each;						$intOrder2 += 1;					}				}			}		}		else if ($mrSubdivApproxMode == "approxManualRB")		{ 			$selection = `ls -selection`; //we expact user to sometimes select stuffs that are non-polygon			$selection = `filterExpand -selectionMask 12 $selection`; //but without worry, using the filterExpand command, mask out only polygon from selection			$selection = `pickWalk -direction "down"`; //pickwalk down to get the shape name		}				string $mrSubdivApproxNode = "";		if (`objExists "mrSubdivApprox"` == 0) 		{			$mrSubdivApproxNode = eval("createNode \"mentalraySubdivApprox\" -name \"mrSubdivApprox\"");	//create a mentalray subdivide approximation node (if earlier, mentalray was not loaded, creating this would have given us an error)		} 		else 		{			$mrSubdivApproxNode = "mrSubdivApprox";		}			for ($c = 0; $c < size($selection); $c++)	//key idea here is to select all the meshes, add a new attribute in their shapes, must be called "miSubdivApprox" and connect the mentalray approximation node ".message" attribute to them		{			if (`attributeExists "miSubdivApprox" $selection[$c]` == 0)	//check if maybe the attribute already exist due to past where they had already been assigned, and if exist, skip. Only add on those that don't have the attribute to prevent error "attribute already existed" error			{				addAttr -longName "miSubdivApprox" -dataType "string" $selection[$c];				setAttr -keyable 1 ($selection[$c] + ".miSubdivApprox");			}						if ($mrSubdivApproxMode == "approxAllRB" || $mrSubdivApproxManual == 1)			{				if (`isConnected ($mrSubdivApproxNode + ".message") ($selection[$c] + ".miSubdivApprox")` == 0)				{					connectAttr -force ($mrSubdivApproxNode + ".message") ($selection[$c] + ".miSubdivApprox");				}			}			else if ($mrSubdivApproxManual == 0)			{				if (`isConnected ($mrSubdivApproxNode + ".message") ($selection[$c] + ".miSubdivApprox")` == 1)				{								disconnectAttr ($mrSubdivApproxNode + ".message") ($selection[$c] + ".miSubdivApprox");				}			}			}				for ($c = 0; $c < size($dontSmoothSelection); $c++)	//disconnect "exception named mesh" from approximation		{			if ($mrSubdivApproxMode == "approxAllRB" && $dontSmoothSelection[0] != "")			{				if (`objExists ($dontSmoothSelection[$c] + ".miSubdivApprox")`)				{					if (`isConnected ($mrSubdivApproxNode + ".message") ($dontSmoothSelection[$c] + ".miSubdivApprox")`)					{						disconnectAttr ($mrSubdivApproxNode + ".message") ($dontSmoothSelection[$c] + ".miSubdivApprox");					}				}			}		}	}		setAttr "mrSubdivApprox.approxMethod"	    $approxMethod;	setAttr "mrSubdivApprox.minSubdivisions"    $minSubdiv;	setAttr "mrSubdivApprox.maxSubdivisions"    $maxSubdiv;	setAttr "mrSubdivApprox.length"		        $length;	setAttr "mrSubdivApprox.viewDependent"	    $viewDependent;	setAttr "mrSubdivApprox.fine"		        $fine;}global proc importOutdoor(){	string $extension = `textField -query -text "outdoorTF"`;	if (`fileExtension($extension)` == "mb" && `filetest -r $extension` || `fileExtension($extension)` == "ma" && `filetest -r $extension`)	{			file -import `textField -query -text "outdoorTF"`;	}	else	{		confirmDialog -title "Import error" -message "File don't exist or not supported extension type. Make sure it's a valid Maya file! (.mb/.ma)" -button "OK";	}}global proc setMrIBL(){	string $mrIblImage = `textField -query -text "mrIblTF"`;	string $mrIblImageSupport[] = {"iff", "hdr"};	string $showError = "true";	string $mrIblExt = "";		for ($each in $mrIblImageSupport)	{		$mrIblExt = `fileExtension($mrIblImage)`;		if (`filetest -r $mrIblImage` && `gmatch $mrIblExt ("*" + $each)`)		{			string $mrIBL[] = `ls -type "mentalrayIblShape"`;				if ($mrIBL[0] != "")				{					delete `listRelatives -parent $mrIBL`;				}							createNode "mentalrayIblShape" -name "mentalrayIblShape1";					connectAttr "mentalrayIblShape1.message" "mentalrayGlobals.imageBasedLighting";										setAttr ("mentalrayIbl1.translateX") 610;					setAttr ("mentalrayIbl1.translateY") 0;					setAttr ("mentalrayIbl1.translateZ") -255;								setAttr ("mentalrayIbl1.rotateX") 0;					setAttr ("mentalrayIbl1.rotateY") -85;					setAttr ("mentalrayIbl1.rotateZ") 0;								setAttr ("mentalrayIbl1.scaleX") 44555;					setAttr ("mentalrayIbl1.scaleY") 44555;					setAttr ("mentalrayIbl1.scaleZ") 44555;										setAttr "mentalrayIblShape1.primaryVisibility" 0;					setAttr "mentalrayIblShape1.visibleInEnvironment" 1;					setAttr "mentalrayIblShape1.visibleInReflections" 1;					setAttr "mentalrayIblShape1.visibleInRefractions" 1;					setAttr "mentalrayIblShape1.visibleInFinalGather" 1;									if (`objExists("LightCtrls")`)				{					connectAttr "LightCtrls.mrIBLcolorGain" "mentalrayIblShape1.colorGainR";					connectAttr "mentalrayIblShape1.colorGainR" "mentalrayIblShape1.colorGainG";					connectAttr "mentalrayIblShape1.colorGainR" "mentalrayIblShape1.colorGainB";				}				else				{					setAttr "mentalrayIblShape1.colorGain" -type double3 35 35 35;				}						showEditor "mentalrayIblShape1";			setAttr -type "string" "mentalrayIblShape1.texture" $mrIblImage;			$showError = "false";			break;		}	}		if ($showError == "true")	{		confirmDialog -title "Mentalray IBL error" -message "Image path don't exist or not supported file type!" -button "OK";	}}			//Browserglobal proc pathBrowser(string $data){	string $browser = `fileDialog -mode 0`;		if ($data == "outdoorTF")	{		textField -edit -text $browser "outdoorTF";	}	else if ($data == "mrIblTF")	{		textField -edit -text $browser "mrIblTF";	}}global proc quickSelectSkyRamp(){    if (`objExists("LightRig_12_Sky_Ramp1")`)    {        showEditor "LightRig_12_Sky_Ramp1";    }}global proc quickSelectLightrigControl(){    if (`objExists("LightCtrls")`)    {        select -replace "LightCtrls";        if (`getApplicationVersionAsFloat` > 2010)        {			eval("showChannelsLayers(1);");		}		else if (`getApplicationVersionAsFloat` == 2010)		{			eval("showChannelsLayers \"Channel Box / Layer Editor\" 1");		}    }}global proc quickSmoothSelection(){	string $selection[] = `ls -selection`;	string $filterMesh[] = `filterExpand -selectionMask 12`;		if ($filterMesh[0] != "")	{		for ($each in $filterMesh)		{			polySmooth $each;		}	}	else	{		print("Select mesh(s) to smooth!\n");	}}//Cloud texture alter colorGainglobal proc cloudTextureColorGain(){	string $cloudTextures[] = {"Cloud_01_Texture.tga", "Cloud_02_Texture.tga", "Cloud_Front_Texture.tga", "Cloud_Back_Texture.tga"};	string $textureFiles[] = `ls -type "file"`;	string $textureFileName = "";	for ($each in $textureFiles)	{		$textureFileName = `getAttr ($each + ".fileTextureName\n")`;		for ($filter in $cloudTextures)		{			if (`gmatch $textureFileName ("*" + $filter + "*")`)			{				setAttr ($each + ".colorGain") -type "double3" 4.2 3.35 2.94;			}		}	}}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Actual Script /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////global proc fetchUI(int $mrSubdivApproxManual){	//fetch from UI	//Polygon masking selection	string $characterMask		= `textField -query -text "characterMaskTF"`;	string $propMask			= `textField -query -text "propsMaskTF"`;	string $backgroundMask	 	= `textField -query -text "backgroundMaskTF"`;	string $mouthMask			= `textField -query -text "mouthMaskTF"`;	string $cloudMask			= `textField -query -text "cloudMaskTF"`;	//Layer name	string $shadowLayer			= `textField -query -text "shadowLayerTF"`;	string $occlusionLayer 		= `textField -query -text "occlusionLayerTF"`;	//Toggle layer	int $shadowLayerActivate		= `checkBox -query -value "shadowLayerCB"`;	int $occlusionLayerActivate		= `checkBox -query -value "occlusionLayerCB"`;	string $mrSubdivApproxMode 		= `radioCollection -query -select "approximationRC"`;	//Annotation	string $annotation[] = {};	$annotation = `ls -type "annotationShape"`;	//selection mask section	//Character mask	$characterMask = ("*" + $characterMask + "*");		string $selection[] = {};	$selection = `ls -transforms`;	select -clear;	for ($each in $selection)	{		if (`gmatch $each $characterMask` == "1")		{			select -add $each;		}	}		string $characterName[] = {};	$characterName = `filterExpand -selectionMask 12`;		//Props mask	$propMask = ("*" + $propMask + "*");							string $selection[] = {};	$selection = `ls -transforms`;						select -clear;	for ($each in $selection)	{		if (`gmatch $each $propMask` == "1")		{			select -add $each;		}	}							string $propName[] = {};	$propName = `filterExpand -selectionMask 12`;		//Background mask	$backgroundMask = ("*" + $backgroundMask + "*");		string $selection[] = {};	$selection = `ls -transforms`;	select -clear;	for ($each in $selection)	{		if (`gmatch $each $backgroundMask` == "1")		{			select -add $each;		}	}		string $backgroundName[] = {};	$backgroundName = `filterExpand -selectionMask 12`;							//Mouth mask	$mouthMask = ("*" + $mouthMask + "*");							string $selection[] = {};	$selection = `ls -transforms`;						select -clear;	for ($each in $selection)	{		if (`gmatch $each $mouthMask` == "1")		{			select -add $each;		}	}							string $mouthName[] = {};	$mouthName = `filterExpand -selectionMask 12`;									//Cloud mask	$cloudMask = ("*" + $cloudMask + "*");			string $selection[] = {};	$selection = `ls -transforms`;		select -clear;	for ($each in $selection)	{		if (`gmatch $each $cloudMask` == "1")		{			select -add $each;		}	}			string $cloudName[] = {};	$cloudName = `filterExpand -selectionMask 12`;		//progressBar 40%	for ($c = 0; $c < 400; $c++)	{		progressBar -edit -step 1 "progressBar";	}										//Shadow layer	if ($shadowLayerActivate == "1" && `objExists $shadowLayer` == "1")		{		editRenderLayerMembers -noRecurse $shadowLayer $characterName $propName $backgroundName $annotation;		editRenderLayerMembers -remove $shadowLayer $mouthName $cloudName;		setAttr ($shadowLayer + ".renderable") 1;	}	else if ($shadowLayerActivate == "0" && `objExists $shadowLayer` == "1")	{		editRenderLayerMembers -remove $shadowLayer $characterName $propName $backgroundName;		setAttr ($shadowLayer + ".renderable") 0;	}		//Occlusion layer	if ($occlusionLayerActivate == "1" && `objExists $occlusionLayer` == "1")	{		editRenderLayerMembers -noRecurse $occlusionLayer $characterName $propName $backgroundName;		editRenderLayerMembers -remove $occlusionLayer $mouthName $cloudName;		setAttr ($occlusionLayer + ".renderable") 1;	}	else if ($occlusionLayerActivate == "0" && `objExists $occlusionLayer` == "1")	{		editRenderLayerMembers -remove $occlusionLayer $characterName $propName $backgroundName;		setAttr ($occlusionLayer + ".renderable") 0;	}	if ($mrSubdivApproxMode == "approxAllRB")	{		mrSubdivApprox($mrSubdivApproxManual);	}	else if ($mrSubdivApproxMode == "approxOffRB" && `objExists "mrSubdivApprox"` == 1)	{		delete `ls -type "mentalraySubdivApprox"`;	}	setAttr "defaultRenderLayer.renderable" 1;		//turn all mesh to display "1" smoothness instead of "3"	select -replace `ls -type "mesh"`;	displaySmoothness -polygonObject 1;		mrSetup();	renderGlobalSettings();	mrMiaExposurePhoto();	cloudTextureColorGain();		//progressBar 90%	for ($c = 0; $c < 500; $c++)	{		progressBar -edit -step 1 "progressBar";	}		select -clear;}//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// User Interface ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////if (`window -exists "sTrL_outdoor"`){	deleteUI "sTrL_outdoor";	windowPref -remove "sTrL_outdoor";}	window -title "sTrL_outdoor" -resizeToFitChildren 1 "sTrL_outdoor";	//Light-Rig path columncolumnLayout -adjustableColumn 1;	frameLayout -label "Setup" -collapsable 0 -marginWidth 5 -marginHeight 5;		rowColumnLayout -numberOfColumns 3						-columnWidth 1 90						-columnWidth 2 130						-columnWidth 3 45;						text -label "Outdoor Light: " -align "right";			textField -text "P:/TVSeries/BuzzyBee/PRODUCTION/lighted/LIGHT_files/light.ma" "outdoorTF";			button -label "browse" -command ("pathBrowser(\"outdoorTF\");");			text -label "";			button -label "Import" -command "mrSetup(); importOutdoor()";						text -label "";			text -label "";			text -label "";			text -label "";						text -label "Mentalray IBL: " -align "right";			textField -text "P:/TVSeries/BuzzyBee/MAYA_PROJECT/sourceimages/OfficeEden/Eden_Diffuse8_deSatBW_ss.iff" "mrIblTF";			button -label "browse" -command ("pathBrowser(\"mrIblTF\");");			text -label "";			button -label "Renew Mentalray IBL" -command "mrSetup(); setMrIBL();";//Selection mask column	setParent ..;	setParent ..;	frameLayout -label "Selection mask" -marginWidth 5 -marginHeight 5;		rowColumnLayout -numberOfColumns 2						-columnWidth 1 90						-columnWidth 2 130;						text -label "Character: " -align "right"; 			textField -insertText "MCM" "characterMaskTF"; 				text -label "Props: " -align "right"; 			textField -insertText "Prop" "propsMaskTF";				text -label "Background: " -align "right"; 			textField -insertText "LOC" "backgroundMaskTF";				text -label "Mouth: " -align "right"; 			textField -insertText "Mouth" "mouthMaskTF";				text -label "Cloud: " -align "right"; 			textField -insertText "clouds" "cloudMaskTF";//Render layer column	setParent ..;	setParent ..;	frameLayout -label "Render layer" -marginWidth 5 -marginHeight 5;		rowColumnLayout -numberOfColumns 3			-columnWidth 1 90			-columnWidth 2 130			-columnWidth 3 45;			//Render layer column			text -label "Occlusion layer: " -align "right"; 			textField -insertText "occu" -enable 1 "occlusionLayerTF";			checkBox -label ""		 			 -value 1		 			 -onCommand "textField -edit -enable 1 \"occlusionLayerTF\";"		 			 -offCommand "textField -edit -enable 0 \"occlusionLayerTF\";"		 			 "occlusionLayerCB";				//shadow layer column			text -label "Shadow layer: " -align "right"; 			textField -insertText "shdw" -enable 1 "shadowLayerTF"; 			checkBox -label "" 		 			 -value 1		 			 -onCommand "textField -edit -enable 1 \"shadowLayerTF\";"		 			 -offCommand "textField -edit -enable 0 \"shadowLayerTF\";"		 			 "shadowLayerCB";//Render camera column	setParent ..;	setParent ..;	frameLayout -label "Render camera" -collapse 0 -marginWidth 5 -marginHeight 5;		rowColumnLayout -numberOfColumns 3						-columnWidth 1 90						-columnWidth 2 130						-columnWidth 3 15;			text -label "Camera: " -align "right";			textScrollList	-numberOfRows 5						-height 67						-selectCommand "setRenderableCamera()"						"cameraTSL";						 					text -label "";			text -label "";			button	-label "Refresh" 					-command "cameraRefresh()";				cameraRefresh();			//Control select	setParent ..;	setParent ..;	frameLayout -label "Adjustable Controls" -collapse 0 -marginWidth 5 -marginHeight 5;		columnLayout -adjustableColumn 1;			button -label "Sky Ramp" -command "quickSelectSkyRamp();";			button -label "Light Control" -command "quickSelectLightrigControl();";			button -label "Smooth Selection" -command "quickSmoothSelection()";			//Mentalray Subdivide Approximation column	setParent ..;	setParent ..;	frameLayout -label "Mentalray Subdivide Approximation" -collapsable 1 -collapse 1 -marginWidth 5 -marginHeight 5;		rowColumnLayout -numberOfColumns 3						-columnWidth 1 90						-columnWidth 2 130						-columnWidth 3 15;						text -label "";			radioCollection "approximationRC";			radioButton	-label "Assign to all" 					-select					-onCommand "button -edit -enable 0 \"assignApproximationBT\"; button -edit -enable 0 \"unassignApproximationBT\"; textField -edit -enable 1 \"smoothingException\";"					"approxAllRB";									text -label "";			text -label "Exception: " -align "right";			textField	-insertText "_d0_n0t_sm00th"					"smoothingException";						text -label "";			text -label "";			radioButton	-label "Manual override"						-onCommand "button -edit -enable 1 \"assignApproximationBT\"; button -edit -enable 1 \"unassignApproximationBT\"; textField -edit -enable 0 \"smoothingException\";"						approxManualRB;				text -label "";			text -label "";			int $mrSubdivApproxManual = 0;			button	-label "Assign selection"		   			-enable 0		   			-command "string $currentSelection[] = `ls -selection`; $mrSubdivApproxManual = 1; mrSubdivApprox($mrSubdivApproxManual); select -replace $currentSelection;"		   			"assignApproximationBT";				text -label "";			text -label "";			button	-label "Unassign selection"					-enable 0		   			-command "string $currentSelection[] = `ls -selection`; $mrSubdivApproxManual = 0; mrSubdivApprox($mrSubdivApproxManual); select -replace $currentSelection;"		   			"unassignApproximationBT";									text -label "";			text -label "";			radioButton	-label "Off"		 				-onCommand "button -edit -enable 0 \"assignApproximationBT\"; button -edit -enable 0 \"unassignApproximationBT\"; textField -edit -enable 0 \"smoothingException\";"		 				approxOffRB;//Execute button	setParent ..;	setParent ..;	columnLayout -adjustableColumn 1;		button -label "Go!" -command "string $currentSelection[] = `ls -selection`; progressBar -edit -progress 0 \"progressBar\"; fetchUI($mrSubdivApproxManual); select -replace $currentSelection; for ($c = 0; $c < 100; $c++) progressBar -edit -step 1 \"progressBar\"; print \"\\nCompleted!\";";	//Progress bar	setParent ..;	setParent ..;	columnLayout -adjustableColumn 1;		progressBar -minValue 0 -maxValue 1000 "progressBar";showWindow "sTrL_outdoor";